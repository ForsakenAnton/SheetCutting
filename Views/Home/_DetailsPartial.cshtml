@using SheetCutting.Models.ViewModels
@model IndexViewModel


@if (Model.CuttedDetails != null)
{
    <div class="m-0"> <-------------------------------- @Model.Sheet.Width --------------------------------> </div>
    <div class="ps-4" style="transform:rotate(90deg); transform-origin:top left"> <-------------------------------- @Model.Sheet.Height --------------------------------> </div>
   
    <div class="bg-gradient border border-dark p-0 position-relative" style="width:100%; max-width:@(Model.Sheet.Width)px; height:@(Model.Sheet.Height)px; background-color:gainsboro; font-size:0">
        @foreach (var item in Model.CuttedDetails)
        {
            double widthInPercent = (double)item.Width / Model.Sheet.Width * 100;
            string percent = widthInPercent.ToString().Replace(',', '.') + "%";

            <div class="d-inline-block m-0 p-0 align-top" style="width:@percent;">
                <div style="height:@(item.Height)px; background-color:@(item.BackgroundColor); font-size:14px; opacity: 0.7" class="border border-2 border-dark bg-gradient m-0 p-0 text-center">
                    <span style="opacity:1" class="top-50 position-relative">@(item.Width)x@(item.Height)</span>
                </div>
                if (item.Details?.Count > 0)
                {
                    @await Html.PartialAsync(
                        "_RecursionDetailsPartial",
                        item);
                }
            </div>
        }
    </div>
}





@*@if (Model.CuttedDetails != null)
{
    <div class="m-0"> <-------------------------------- @Model.Sheet.Width --------------------------------> </div>
    <div class="ps-4" style="transform:rotate(90deg); transform-origin:top left"> <-------------------------------- @Model.Sheet.Height --------------------------------> </div>
   
    <div class="bg-gradient border border-dark p-0 position-relative" style="width:100%; max-width:@(Model.Sheet.Width)px; height:@(Model.Sheet.Height)px; background-color:gainsboro; font-size:0">
        @foreach (var item in Model.CuttedDetails)
        {
            double widthInPercent = (double)item.Width / Model.Sheet.Width * 100;
            string percent = widthInPercent.ToString().Replace(',', '.') + "%";

            <div class="d-inline-block m-0 p-0" style="width:@percent;">
                <div style="height:@(item.Height)px; background-color:@(item.BackgroundColor); font-size:14px; opacity: 0.7" class="border border-2 border-dark bg-gradient m-0 p-0 text-center">
                    <span style="opacity:1" class="top-50 position-relative">@(item.Width)x@(item.Height)</span>
                </div>
                if (item.Details?.Count > 0)
                {
                    @await Html.PartialAsync(
                        "_RecursionDetailsPartial",
                        item);
                }
            </div>
        }
    </div>
}*@